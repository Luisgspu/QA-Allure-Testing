{"uid":"7111edf071591bfc","name":"test_run[test_case0]","fullName":"QAAppAllure#test_run","historyId":"2542f687ef167a2b739d69b8dc1a9df4","time":{"start":1746211687419,"stop":1746211687619,"duration":200},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n#0 0x56512ee2675a <unknown>\n#1 0x56512e8d94b0 <unknown>\n#2 0x56512e913308 <unknown>\n#3 0x56512e90eccf <unknown>\n#4 0x56512e95ef0e <unknown>\n#5 0x56512e95e436 <unknown>\n#6 0x56512e950363 <unknown>\n#7 0x56512e91cd63 <unknown>\n#8 0x56512e91d9c1 <unknown>\n#9 0x56512edeba6b <unknown>\n#10 0x56512edef951 <unknown>\n#11 0x56512edd3b62 <unknown>\n#12 0x56512edf04c4 <unknown>\n#13 0x56512edb813f <unknown>\n#14 0x56512ee146f8 <unknown>\n#15 0x56512ee148d6 <unknown>\n#16 0x56512ee255a6 <unknown>\n#17 0x7ff71309caa4 <unknown>\n#18 0x7ff713129c3c <unknown>","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'model_name': 'CLA', ...}\nscreenshot_dir = '/home/runner/work/QA-Perso/QA-Perso/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n>       driver = create_driver(options)\n\nQAAppAllure.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nApp/CreateDriver.py:27: in create_driver\n    driver = webdriver.Chrome(options=options)\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-O8BnsWFA-py3.13/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-O8BnsWFA-py3.13/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-O8BnsWFA-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-O8BnsWFA-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-O8BnsWFA-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fedbd251f30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: probably user data d...\\\\n#16 0x56512ee255a6 \\\\u003Cunknown>\\\\n#17 0x7ff71309caa4 \\\\u003Cunknown>\\\\n#18 0x7ff713129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE       Stacktrace:\nE       #0 0x56512ee2675a <unknown>\nE       #1 0x56512e8d94b0 <unknown>\nE       #2 0x56512e913308 <unknown>\nE       #3 0x56512e90eccf <unknown>\nE       #4 0x56512e95ef0e <unknown>\nE       #5 0x56512e95e436 <unknown>\nE       #6 0x56512e950363 <unknown>\nE       #7 0x56512e91cd63 <unknown>\nE       #8 0x56512e91d9c1 <unknown>\nE       #9 0x56512edeba6b <unknown>\nE       #10 0x56512edef951 <unknown>\nE       #11 0x56512edd3b62 <unknown>\nE       #12 0x56512edf04c4 <unknown>\nE       #13 0x56512edb813f <unknown>\nE       #14 0x56512ee146f8 <unknown>\nE       #15 0x56512ee148d6 <unknown>\nE       #16 0x56512ee255a6 <unknown>\nE       #17 0x7ff71309caa4 <unknown>\nE       #18 0x7ff713129c3c <unknown>\n\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-O8BnsWFA-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746211687418,"stop":1746211687419,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"as_id","value":"e52f29fbba1b7758f00eaf5611cca879"},{"name":"suite","value":"QAAppAllure"},{"name":"host","value":"fv-az1660-68"},{"name":"thread","value":"2250-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Configuration Started', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'urls': {'MODEL_CODE': 'C118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/coupe/cla/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLA/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=COUPE', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLA'}, 'model_name': 'CLA', 'body_type': 'COUPE'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7111edf071591bfc.json","parameterValues":["{'test_name': 'Last Configuration Started', 'market_code': 'IT/it', 'model_code': 'C118-fl', 'urls': {'MODEL_CODE': 'C118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/coupe/cla/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLA/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=COUPE', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLA'}, 'model_name': 'CLA', 'body_type': 'COUPE'}"]}