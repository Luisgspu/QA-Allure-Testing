{"uid":"f3a0ee0a2e8215fd","name":"test_run[test_case230]","fullName":"QAAppAllure#test_run","historyId":"52eb40f23effd8b4e688242817742bea","time":{"start":1746346395787,"stop":1746346438417,"duration":42630},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Configuration Started' failed.","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'GB/en', 'model_code': 'X290-fl', 'model_name': 'AMG-GT', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:301: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e1068e06396087583b0dd8c5e3fda599\")>\ntest_name = 'Last Configuration Started', market_code = 'GB/en'\nmodel_code = 'X290-fl', model_name = 'AMG-GT', body_type = 'COUPE', attempt = 1\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.co.uk/passengercars/mercedes-benz-cars/car-configura...on/CCci/GB/en/GT-KLASSE/4-TUERER COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.co.uk/', 'MODEL_CODE': 'X290-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7fea6ad90f50>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7fea6ad18de0>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Configuration Started' failed.\n\nQAAppAllure.py:174: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746346395787,"stop":1746346395787,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Configuration Started' failed.","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'GB/en', 'model_code': 'X290-fl', 'model_name': 'AMG-GT', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:301: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e1068e06396087583b0dd8c5e3fda599\")>\ntest_name = 'Last Configuration Started', market_code = 'GB/en'\nmodel_code = 'X290-fl', model_name = 'AMG-GT', body_type = 'COUPE', attempt = 1\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.co.uk/passengercars/mercedes-benz-cars/car-configura...on/CCci/GB/en/GT-KLASSE/4-TUERER COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.co.uk/', 'MODEL_CODE': 'X290-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7fea6ad90f50>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7fea6ad18de0>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Configuration Started' failed.\n\nQAAppAllure.py:174: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746346396398,"stop":1746346396433,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1746346396433,"stop":1746346396434,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform Last Configuration Started Test Logic","time":{"start":1746346405107,"stop":1746346419988,"duration":14881},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.co.uk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/GB/en/GT-KLASSE/4-TUERER COUPE","time":{"start":1746346405107,"stop":1746346410671,"duration":5564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1746346410671,"stop":1746346416928,"duration":6257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating back to: https://www.mercedes-benz.co.uk/","time":{"start":1746346416928,"stop":1746346419988,"duration":3060},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":3,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746346423988,"stop":1746346424723,"duration":735},"status":"passed","steps":[{"name":"Setting campaign name substring for test: Last Configuration Started","time":{"start":1746346423988,"stop":1746346423988,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"dd1050520a3026cb","name":"Info","source":"dd1050520a3026cb.txt","type":"text/plain","size":50}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1746346423988,"stop":1746346424712,"duration":724},"status":"passed","steps":[],"attachments":[{"uid":"4082de096fac2726","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_united_kingdom_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZW5fR0IiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmNvLnVrLyIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNTcifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjYxOTYyMTQxNi4xNzQ2MzQ2NDA1In0sImFub25JZCI6IjRkMGNkNzFlMDU4MTUzNDAifSwicGVyZm9ybWFuY2UiOnt9LCJkZWJ1ZyI6eyJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiI2ODk1MDg1OTQ3MjM4OTA4In0%3D","source":"4082de096fac2726.json","type":"application/json","size":2042}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Campaign 'last-configuration | private vans and all car models | home | simple-teaser' has userGroup: Default and experienceName: Experience 1.","time":{"start":1746346424723,"stop":1746346424723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746346424723,"stop":1746346434949,"duration":10226},"status":"passed","steps":[{"name":"\uD83D\uDCDC Scrolling to the UK-specific element...","time":{"start":1746346424723,"stop":1746346424771,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746346434948,"stop":1746346434949,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e78f2c224333dd3b","name":"Expected Image Source","source":"e78f2c224333dd3b.txt","type":"text/plain","size":37},{"uid":"9ba83bce1e876dcc","name":"Image Verification Error","source":"9ba83bce1e876dcc.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746346434949,"stop":1746346434954,"duration":5},"status":"passed","steps":[],"attachments":[{"uid":"eb3afe65bc885ee1","name":"Campaign Images","source":"eb3afe65bc885ee1.txt","type":"text/plain","size":528}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746346434954,"stop":1746346437985,"duration":3031},"status":"passed","steps":[],"attachments":[{"uid":"682251dcb0ed2e13","name":"Scroll Info","source":"682251dcb0ed2e13.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1746346438307,"stop":1746346438309,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"6dd6407cc654e4d5","name":"Final Screenshot","source":"6dd6407cc654e4d5.png","type":"image/png","size":605197}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"933fb2e4dd56359f","name":"URLs for AMG-GT (COUPE)","source":"933fb2e4dd56359f.json","type":"application/json","size":429},{"uid":"71a7496ce4b49a6b","name":"Test Failure","source":"71a7496ce4b49a6b.txt","type":"text/plain","size":45},{"uid":"a472f502ea071c01","name":"log","source":"a472f502ea071c01.txt","type":"text/plain","size":45367}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":10,"stepsCount":16,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"8c8a7ad4052713485a8d7a5af0df17a4"},{"name":"parentSuite","value":"GB/en"},{"name":"suite","value":"Last Configuration Started"},{"name":"subSuite","value":"X290-fl - AMG-GT (COUPE)"},{"name":"tag","value":"Last Configuration Started"},{"name":"tag","value":"GB/en"},{"name":"tag","value":"X290-fl"},{"name":"tag","value":"COUPE"},{"name":"tag","value":"AMG-GT"},{"name":"host","value":"fv-az1112-814"},{"name":"thread","value":"2259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Configuration Started', 'market_code': 'GB/en', 'model_code': 'X290-fl', 'model_name': 'AMG-GT', 'body_type': 'COUPE', 'urls': {'MODEL_CODE': 'X290-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.co.uk/passengercars/models/coupe/amg-gt/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.co.uk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/GB/en/GT-KLASSE/4-TUERER COUPE', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.co.uk/', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'AMG-GT'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"604a3fe2d56e228b","status":"failed","statusDetails":"Failed: ❌ Test 'Last Configuration Started' failed.","time":{"start":1746346351558,"stop":1746346395753,"duration":44195}},{"uid":"9167ca5935e4284e","status":"failed","statusDetails":"Failed: ❌ Test 'Last Configuration Started' failed.","time":{"start":1746346310147,"stop":1746346351532,"duration":41385}},{"uid":"dde03553e474e706","status":"failed","statusDetails":"Failed: ❌ Test 'Last Configuration Started' failed.","time":{"start":1746346267681,"stop":1746346310089,"duration":42408}},{"uid":"f17983624ca4e0cf","status":"failed","statusDetails":"Failed: ❌ Test 'Last Configuration Started' failed.","time":{"start":1746346225305,"stop":1746346267657,"duration":42352}},{"uid":"4995083013ca14bb","status":"failed","statusDetails":"Failed: ❌ Test 'Last Configuration Started' failed.","time":{"start":1746346181998,"stop":1746346225280,"duration":43282}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["X290-fl","AMG-GT","GB/en","COUPE","Last Configuration Started"]},"source":"f3a0ee0a2e8215fd.json","parameterValues":["{'test_name': 'Last Configuration Started', 'market_code': 'GB/en', 'model_code': 'X290-fl', 'model_name': 'AMG-GT', 'body_type': 'COUPE', 'urls': {'MODEL_CODE': 'X290-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.co.uk/passengercars/models/coupe/amg-gt/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.co.uk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/GB/en/GT-KLASSE/4-TUERER COUPE', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.co.uk/', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'AMG-GT'}}"]}