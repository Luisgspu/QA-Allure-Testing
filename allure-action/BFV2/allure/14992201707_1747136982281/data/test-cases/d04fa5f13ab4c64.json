{"uid":"d04fa5f13ab4c64","name":"test_run[test_case334]","fullName":"QAAppAllure#test_run","historyId":"bad307c13d0738037be5e343ceaca6b5","time":{"start":1747129148848,"stop":1747129204416,"duration":55568},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed due to image verification error: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5929b50f232ee6d33ccbea7733be3847\")>\ntest_name = 'BFV2', model_name = 'S-CLASS', body_type = 'SALOON', retries = 1\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f9246a5da90>\nurls = {'BODY_TYPE': 'SALOON?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-c...t=true', 'HOME_PAGE': 'https://www.mercedes-benz.hu/?internal_test=true', 'MODEL_CODE': 'V223?internal_test=true', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n                                        pytest.fail(message)\n                                        logging.info(f\"ℹ️ Campaign '{campaign_name}' is in the Control Group. Retrying test without marking success or failure.\")\n    \n                                    # Add a custom defect category for Control Group Fail\n                                    allure.dynamic.label(\"defect\", \"Control Group Fail\")\n                                    allure.dynamic.tag(\"Control Group Issue\")\n    \n                                    # Reset retries to ensure the next attempt is still the same number\n                                    retries -= 1\n                                    return False  # Retry the test without marking success or failure\n                                else:\n                                    with allure.step(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\"):\n                                        logging.info(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\")\n                    else:\n                        logging.warning(\"⚠️ WebDriver session is not active. Skipping XHR response capture.\")\n                except Exception as e:\n                    logging.error(f\"❌ Failed to check userGroup in XHR responses: {e}\")\n                    allure.attach(f\"❌ Failed to check userGroup in XHR responses: {e}\", name=\"XHR Error\", attachment_type=allure.attachment_type.TEXT)\n                    retries -= 1  # Reset retries in case of an error\n                    return False  # Retry the test in case of an error\n    \n            # Verify the personalized image\n            with allure.step(\"\uD83D\uDD0D Verifying personalized image...\"):\n                try:\n                    # Determine the expected src based on the test_name\n                    if test_name in [\"BFV1\", \"BFV2\", \"BFV3\"]:\n                        expected_src = \"/content/dam/hq/personalization/campaignmodule/\"\n                    else:\n                        expected_src = \"/images/dynamic/europe/\"\n    \n                    # Dynamically determine the selector based on the market\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        selector = \"body > div.root.responsivegrid.owc-content-container > div > div.responsivegrid.ng-content-root.aem-GridColumn.aem-GridColumn--default--12 > div > div:nth-child(16)\"\n                    else:\n                        selector = \"[data-component-name='hp-campaigns']\"\n    \n                    # Scroll to the element if the market is UK\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        with allure.step(\"\uD83D\uDCDC Scrolling to the UK-specific element...\"):\n                            try:\n                                element_to_scroll = driver.find_element(By.CSS_SELECTOR, selector)\n                                driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element_to_scroll)\n                                logging.info(f\"✅ Scrolled to element: {selector}\")\n                            except Exception as e:\n                                logging.error(f\"❌ Failed to scroll to element: {selector}. Error: {e}\")\n                                allure.attach(f\"Error: {e}\", name=\"Scroll Error\", attachment_type=allure.attachment_type.TEXT)\n                                return False\n    \n                    # Wait for the images to load and check if any match the expected src\n>                   WebDriverWait(driver, 10).until(\n                        lambda d: d.execute_script(f\"\"\"\n                            const imgs = document.querySelectorAll(\"{selector} img\");\n                            return Array.from(imgs).some(img => img.complete && img.naturalHeight !== 0 && img.src.includes(\"{expected_src}\"));\n                        \"\"\")\n                    )\n\nApp/VerifyPersonalizationAndCapture.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5929b50f232ee6d33ccbea7733be3847\")>\nmethod = <function verify_personalization_and_capture.<locals>.<lambda> at 0x7f924d9816c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-zz3bSAuT-py3.13/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_case = {'body_type': 'SALOON', 'market_code': 'HU/hu', 'model_code': 'V223', 'model_name': 'S-CLASS', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5929b50f232ee6d33ccbea7733be3847\")>\ntest_name = 'BFV2', model_name = 'S-CLASS', body_type = 'SALOON', retries = 1\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f9246a5da90>\nurls = {'BODY_TYPE': 'SALOON?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-c...t=true', 'HOME_PAGE': 'https://www.mercedes-benz.hu/?internal_test=true', 'MODEL_CODE': 'V223?internal_test=true', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n                                        pytest.fail(message)\n                                        logging.info(f\"ℹ️ Campaign '{campaign_name}' is in the Control Group. Retrying test without marking success or failure.\")\n    \n                                    # Add a custom defect category for Control Group Fail\n                                    allure.dynamic.label(\"defect\", \"Control Group Fail\")\n                                    allure.dynamic.tag(\"Control Group Issue\")\n    \n                                    # Reset retries to ensure the next attempt is still the same number\n                                    retries -= 1\n                                    return False  # Retry the test without marking success or failure\n                                else:\n                                    with allure.step(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\"):\n                                        logging.info(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\")\n                    else:\n                        logging.warning(\"⚠️ WebDriver session is not active. Skipping XHR response capture.\")\n                except Exception as e:\n                    logging.error(f\"❌ Failed to check userGroup in XHR responses: {e}\")\n                    allure.attach(f\"❌ Failed to check userGroup in XHR responses: {e}\", name=\"XHR Error\", attachment_type=allure.attachment_type.TEXT)\n                    retries -= 1  # Reset retries in case of an error\n                    return False  # Retry the test in case of an error\n    \n            # Verify the personalized image\n            with allure.step(\"\uD83D\uDD0D Verifying personalized image...\"):\n                try:\n                    # Determine the expected src based on the test_name\n                    if test_name in [\"BFV1\", \"BFV2\", \"BFV3\"]:\n                        expected_src = \"/content/dam/hq/personalization/campaignmodule/\"\n                    else:\n                        expected_src = \"/images/dynamic/europe/\"\n    \n                    # Dynamically determine the selector based on the market\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        selector = \"body > div.root.responsivegrid.owc-content-container > div > div.responsivegrid.ng-content-root.aem-GridColumn.aem-GridColumn--default--12 > div > div:nth-child(16)\"\n                    else:\n                        selector = \"[data-component-name='hp-campaigns']\"\n    \n                    # Scroll to the element if the market is UK\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        with allure.step(\"\uD83D\uDCDC Scrolling to the UK-specific element...\"):\n                            try:\n                                element_to_scroll = driver.find_element(By.CSS_SELECTOR, selector)\n                                driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element_to_scroll)\n                                logging.info(f\"✅ Scrolled to element: {selector}\")\n                            except Exception as e:\n                                logging.error(f\"❌ Failed to scroll to element: {selector}. Error: {e}\")\n                                allure.attach(f\"Error: {e}\", name=\"Scroll Error\", attachment_type=allure.attachment_type.TEXT)\n                                return False\n    \n                    # Wait for the images to load and check if any match the expected src\n                    WebDriverWait(driver, 10).until(\n                        lambda d: d.execute_script(f\"\"\"\n                            const imgs = document.querySelectorAll(\"{selector} img\");\n                            return Array.from(imgs).some(img => img.complete && img.naturalHeight !== 0 && img.src.includes(\"{expected_src}\"));\n                        \"\"\")\n                    )\n                    test_success = True\n    \n                    # Attach the found src to the Allure report\n                    found_srcs = driver.execute_script(f\"\"\"\n                        const imgs = document.querySelectorAll(\"{selector} img\");\n                        return Array.from(imgs).map(img => img.src);\n                    \"\"\")\n                    matching_src = next((src for src in found_srcs if expected_src in src), \"No matching image found\")\n                    allure.attach(\"\\n\".join(found_srcs), name=\"All Found Image Sources\", attachment_type=allure.attachment_type.TEXT)\n                    allure.attach(matching_src, name=\"Matching Image Source\", attachment_type=allure.attachment_type.TEXT)\n    \n                    with allure.step(f\"✅ Personalized image with expected src '{expected_src}' was applied correctly.\"):\n                        logging.info(f\"✅ Found matching image with src: {matching_src}\")\n                except Exception as e:\n                    # Capture screenshot\n                    logging.info(\"\uD83D\uDCF8 Taking screenshot...\")\n                    screenshot_handler = ScreenshotHandler(driver, screenshot_dir)\n                    screenshot_path = os.path.join(screenshot_dir, f\"{test_name}_attempt_{retries + 1}.png\")\n    \n                    try:\n                        screenshot_handler.scroll_and_capture_screenshot(urls, test_name, model_name, body_type, retries, test_success)\n                        logging.info(f\"✅ Screenshot saved at: {screenshot_path}\")\n    \n                        # Attach the screenshot to the Allure report\n                        attach_screenshot_to_allure(screenshot_path)\n                    except Exception as e:\n                        logging.error(f\"❌ Failed to capture or attach screenshot: {e}\")\n    \n                    with allure.step(f\"❌ Image not found in the specified selector. Error: {e}\"):\n    \n                        logging.error(f\"❌ Image not found in the specified selector. Error: {e}\")\n    \n                        # Add a custom defect category for Wrong Personalization Image\n                        allure.dynamic.label(\"defect\", \"Wrong Personalization Image\")\n                        allure.dynamic.tag(\"Personalization Issue\")\n    \n                        allure.attach(f\"Expected src: {expected_src}\", name=\"Expected Image Source\", attachment_type=allure.attachment_type.TEXT)\n                        allure.attach(f\"Error: {e}\", name=\"Image Verification Error\", attachment_type=allure.attachment_type.TEXT)\n                    # Debug campaign images\n                    with allure.step(\"\uD83D\uDD0D Debugging campaign images...\"):\n                        try:\n                            imgs = driver.execute_script(f\"\"\"\n                                return Array.from(document.querySelectorAll(\"{selector} img\")).map(img => img.src);\n                            \"\"\")\n                            logging.info(f\"\uD83D\uDDBC️ Found campaign images: {imgs}\")\n                            allure.attach(\"\\n\".join(imgs), name=\"Campaign Images\", attachment_type=allure.attachment_type.TEXT)\n                        except Exception as e:\n                            logging.error(f\"❌ Error extracting image URLs: {e}\")\n                            allure.attach(f\"Error extracting image URLs: {e}\", name=\"Image Debug Error\", attachment_type=allure.attachment_type.TEXT)\n    \n                    test_success = False\n                    message = f\"❌ Test '{test_name}' failed due to image verification error: {e}\"\n>                   pytest.fail(f\"❌ Test '{test_name}' failed due to image verification error: {e}\")\nE                   Failed: ❌ Test 'BFV2' failed due to image verification error: Message:\n\nApp/VerifyPersonalizationAndCapture.py:170: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":4,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1747129148847,"stop":1747129148847,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed due to image verification error: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5929b50f232ee6d33ccbea7733be3847\")>\ntest_name = 'BFV2', model_name = 'S-CLASS', body_type = 'SALOON', retries = 1\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f9246a5da90>\nurls = {'BODY_TYPE': 'SALOON?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-c...t=true', 'HOME_PAGE': 'https://www.mercedes-benz.hu/?internal_test=true', 'MODEL_CODE': 'V223?internal_test=true', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n                                        pytest.fail(message)\n                                        logging.info(f\"ℹ️ Campaign '{campaign_name}' is in the Control Group. Retrying test without marking success or failure.\")\n    \n                                    # Add a custom defect category for Control Group Fail\n                                    allure.dynamic.label(\"defect\", \"Control Group Fail\")\n                                    allure.dynamic.tag(\"Control Group Issue\")\n    \n                                    # Reset retries to ensure the next attempt is still the same number\n                                    retries -= 1\n                                    return False  # Retry the test without marking success or failure\n                                else:\n                                    with allure.step(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\"):\n                                        logging.info(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\")\n                    else:\n                        logging.warning(\"⚠️ WebDriver session is not active. Skipping XHR response capture.\")\n                except Exception as e:\n                    logging.error(f\"❌ Failed to check userGroup in XHR responses: {e}\")\n                    allure.attach(f\"❌ Failed to check userGroup in XHR responses: {e}\", name=\"XHR Error\", attachment_type=allure.attachment_type.TEXT)\n                    retries -= 1  # Reset retries in case of an error\n                    return False  # Retry the test in case of an error\n    \n            # Verify the personalized image\n            with allure.step(\"\uD83D\uDD0D Verifying personalized image...\"):\n                try:\n                    # Determine the expected src based on the test_name\n                    if test_name in [\"BFV1\", \"BFV2\", \"BFV3\"]:\n                        expected_src = \"/content/dam/hq/personalization/campaignmodule/\"\n                    else:\n                        expected_src = \"/images/dynamic/europe/\"\n    \n                    # Dynamically determine the selector based on the market\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        selector = \"body > div.root.responsivegrid.owc-content-container > div > div.responsivegrid.ng-content-root.aem-GridColumn.aem-GridColumn--default--12 > div > div:nth-child(16)\"\n                    else:\n                        selector = \"[data-component-name='hp-campaigns']\"\n    \n                    # Scroll to the element if the market is UK\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        with allure.step(\"\uD83D\uDCDC Scrolling to the UK-specific element...\"):\n                            try:\n                                element_to_scroll = driver.find_element(By.CSS_SELECTOR, selector)\n                                driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element_to_scroll)\n                                logging.info(f\"✅ Scrolled to element: {selector}\")\n                            except Exception as e:\n                                logging.error(f\"❌ Failed to scroll to element: {selector}. Error: {e}\")\n                                allure.attach(f\"Error: {e}\", name=\"Scroll Error\", attachment_type=allure.attachment_type.TEXT)\n                                return False\n    \n                    # Wait for the images to load and check if any match the expected src\n>                   WebDriverWait(driver, 10).until(\n                        lambda d: d.execute_script(f\"\"\"\n                            const imgs = document.querySelectorAll(\"{selector} img\");\n                            return Array.from(imgs).some(img => img.complete && img.naturalHeight !== 0 && img.src.includes(\"{expected_src}\"));\n                        \"\"\")\n                    )\n\nApp/VerifyPersonalizationAndCapture.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5929b50f232ee6d33ccbea7733be3847\")>\nmethod = <function verify_personalization_and_capture.<locals>.<lambda> at 0x7f924d9816c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/qa-allure-reporting-zz3bSAuT-py3.13/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_case = {'body_type': 'SALOON', 'market_code': 'HU/hu', 'model_code': 'V223', 'model_name': 'S-CLASS', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5929b50f232ee6d33ccbea7733be3847\")>\ntest_name = 'BFV2', model_name = 'S-CLASS', body_type = 'SALOON', retries = 1\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f9246a5da90>\nurls = {'BODY_TYPE': 'SALOON?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-c...t=true', 'HOME_PAGE': 'https://www.mercedes-benz.hu/?internal_test=true', 'MODEL_CODE': 'V223?internal_test=true', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n                                        pytest.fail(message)\n                                        logging.info(f\"ℹ️ Campaign '{campaign_name}' is in the Control Group. Retrying test without marking success or failure.\")\n    \n                                    # Add a custom defect category for Control Group Fail\n                                    allure.dynamic.label(\"defect\", \"Control Group Fail\")\n                                    allure.dynamic.tag(\"Control Group Issue\")\n    \n                                    # Reset retries to ensure the next attempt is still the same number\n                                    retries -= 1\n                                    return False  # Retry the test without marking success or failure\n                                else:\n                                    with allure.step(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\"):\n                                        logging.info(f\"✅ Campaign '{campaign_name}' has userGroup: {user_group} and experienceName: {experience_Name}.\")\n                    else:\n                        logging.warning(\"⚠️ WebDriver session is not active. Skipping XHR response capture.\")\n                except Exception as e:\n                    logging.error(f\"❌ Failed to check userGroup in XHR responses: {e}\")\n                    allure.attach(f\"❌ Failed to check userGroup in XHR responses: {e}\", name=\"XHR Error\", attachment_type=allure.attachment_type.TEXT)\n                    retries -= 1  # Reset retries in case of an error\n                    return False  # Retry the test in case of an error\n    \n            # Verify the personalized image\n            with allure.step(\"\uD83D\uDD0D Verifying personalized image...\"):\n                try:\n                    # Determine the expected src based on the test_name\n                    if test_name in [\"BFV1\", \"BFV2\", \"BFV3\"]:\n                        expected_src = \"/content/dam/hq/personalization/campaignmodule/\"\n                    else:\n                        expected_src = \"/images/dynamic/europe/\"\n    \n                    # Dynamically determine the selector based on the market\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        selector = \"body > div.root.responsivegrid.owc-content-container > div > div.responsivegrid.ng-content-root.aem-GridColumn.aem-GridColumn--default--12 > div > div:nth-child(16)\"\n                    else:\n                        selector = \"[data-component-name='hp-campaigns']\"\n    \n                    # Scroll to the element if the market is UK\n                    if \".co.uk\" in urls['HOME_PAGE']:\n                        with allure.step(\"\uD83D\uDCDC Scrolling to the UK-specific element...\"):\n                            try:\n                                element_to_scroll = driver.find_element(By.CSS_SELECTOR, selector)\n                                driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element_to_scroll)\n                                logging.info(f\"✅ Scrolled to element: {selector}\")\n                            except Exception as e:\n                                logging.error(f\"❌ Failed to scroll to element: {selector}. Error: {e}\")\n                                allure.attach(f\"Error: {e}\", name=\"Scroll Error\", attachment_type=allure.attachment_type.TEXT)\n                                return False\n    \n                    # Wait for the images to load and check if any match the expected src\n                    WebDriverWait(driver, 10).until(\n                        lambda d: d.execute_script(f\"\"\"\n                            const imgs = document.querySelectorAll(\"{selector} img\");\n                            return Array.from(imgs).some(img => img.complete && img.naturalHeight !== 0 && img.src.includes(\"{expected_src}\"));\n                        \"\"\")\n                    )\n                    test_success = True\n    \n                    # Attach the found src to the Allure report\n                    found_srcs = driver.execute_script(f\"\"\"\n                        const imgs = document.querySelectorAll(\"{selector} img\");\n                        return Array.from(imgs).map(img => img.src);\n                    \"\"\")\n                    matching_src = next((src for src in found_srcs if expected_src in src), \"No matching image found\")\n                    allure.attach(\"\\n\".join(found_srcs), name=\"All Found Image Sources\", attachment_type=allure.attachment_type.TEXT)\n                    allure.attach(matching_src, name=\"Matching Image Source\", attachment_type=allure.attachment_type.TEXT)\n    \n                    with allure.step(f\"✅ Personalized image with expected src '{expected_src}' was applied correctly.\"):\n                        logging.info(f\"✅ Found matching image with src: {matching_src}\")\n                except Exception as e:\n                    # Capture screenshot\n                    logging.info(\"\uD83D\uDCF8 Taking screenshot...\")\n                    screenshot_handler = ScreenshotHandler(driver, screenshot_dir)\n                    screenshot_path = os.path.join(screenshot_dir, f\"{test_name}_attempt_{retries + 1}.png\")\n    \n                    try:\n                        screenshot_handler.scroll_and_capture_screenshot(urls, test_name, model_name, body_type, retries, test_success)\n                        logging.info(f\"✅ Screenshot saved at: {screenshot_path}\")\n    \n                        # Attach the screenshot to the Allure report\n                        attach_screenshot_to_allure(screenshot_path)\n                    except Exception as e:\n                        logging.error(f\"❌ Failed to capture or attach screenshot: {e}\")\n    \n                    with allure.step(f\"❌ Image not found in the specified selector. Error: {e}\"):\n    \n                        logging.error(f\"❌ Image not found in the specified selector. Error: {e}\")\n    \n                        # Add a custom defect category for Wrong Personalization Image\n                        allure.dynamic.label(\"defect\", \"Wrong Personalization Image\")\n                        allure.dynamic.tag(\"Personalization Issue\")\n    \n                        allure.attach(f\"Expected src: {expected_src}\", name=\"Expected Image Source\", attachment_type=allure.attachment_type.TEXT)\n                        allure.attach(f\"Error: {e}\", name=\"Image Verification Error\", attachment_type=allure.attachment_type.TEXT)\n                    # Debug campaign images\n                    with allure.step(\"\uD83D\uDD0D Debugging campaign images...\"):\n                        try:\n                            imgs = driver.execute_script(f\"\"\"\n                                return Array.from(document.querySelectorAll(\"{selector} img\")).map(img => img.src);\n                            \"\"\")\n                            logging.info(f\"\uD83D\uDDBC️ Found campaign images: {imgs}\")\n                            allure.attach(\"\\n\".join(imgs), name=\"Campaign Images\", attachment_type=allure.attachment_type.TEXT)\n                        except Exception as e:\n                            logging.error(f\"❌ Error extracting image URLs: {e}\")\n                            allure.attach(f\"Error extracting image URLs: {e}\", name=\"Image Debug Error\", attachment_type=allure.attachment_type.TEXT)\n    \n                    test_success = False\n                    message = f\"❌ Test '{test_name}' failed due to image verification error: {e}\"\n>                   pytest.fail(f\"❌ Test '{test_name}' failed due to image verification error: {e}\")\nE                   Failed: ❌ Test 'BFV2' failed due to image verification error: Message:\n\nApp/VerifyPersonalizationAndCapture.py:170: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1747129149587,"stop":1747129149635,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1747129149636,"stop":1747129149648,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.hu/?internal_test=true","time":{"start":1747129149648,"stop":1747129154277,"duration":4629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1747129154277,"stop":1747129156884,"duration":2607},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform BFV2 Test Logic","time":{"start":1747129156885,"stop":1747129183972,"duration":27087},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigating to: https://www.mercedes-benz.hu/passengercars/models/saloon/s-class/overview.html?internal_test=true","time":{"start":1747129156885,"stop":1747129168437,"duration":11552},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to: https://www.mercedes-benz.hu/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/HU/hu/S-KLASSE/LIMOUSINE_LANG?internal_test=true","time":{"start":1747129168437,"stop":1747129174529,"duration":6092},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1747129174529,"stop":1747129181933,"duration":7404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating back to: https://www.mercedes-benz.hu/?internal_test=true","time":{"start":1747129181933,"stop":1747129183972,"duration":2039},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1747129187972,"stop":1747129190152,"duration":2180},"status":"passed","steps":[{"name":"Setting campaign name substring for test: BFV2","time":{"start":1747129187973,"stop":1747129187973,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"b9c3617d4db9b87d","name":"Info","source":"b9c3617d4db9b87d.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1747129187973,"stop":1747129190129,"duration":2156},"status":"passed","steps":[],"attachments":[{"uid":"7dbc3e26f4f47c09","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_hungary_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiaHVfSFUiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56Lmh1Lz9pbnRlcm5hbF90ZXN0PXRydWUiLCJ1cmxSZWZlcnJlciI6IiIsImNoYW5uZWwiOiJXZWIiLCJiZWFjb25WZXJzaW9uIjoxNiwiY29uZmlnVmVyc2lvbiI6IjYwIn0sImZsYWdzIjp7InBhZ2VWaWV3Ijp0cnVlfSwidXNlciI6eyJhdHRyaWJ1dGVzIjp7ImdhQ2xpZW50SUQiOiI1OTI5NzgxNTkuMTc0NzEyOTE1NyJ9LCJhbm9uSWQiOiI0ZThhOWMwNDhhZjBiMjZkIn0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMTM0MzYwMDU1MDEyMTk4NiJ9","source":"7dbc3e26f4f47c09.json","type":"application/json","size":3402}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Campaign 'best-fitting-vehicle | all models | home | simple-teaser and stage' has userGroup: Default and experienceName: Target Group.","time":{"start":1747129190152,"stop":1747129190152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1747129190152,"stop":1747129204275,"duration":14123},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV2' failed due to image verification error: Message: \n\n","statusTrace":"  File \"/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/App/VerifyPersonalizationAndCapture.py\", line 170, in verify_personalization_and_capture\n    pytest.fail(f\"❌ Test '{test_name}' failed due to image verification error: {e}\")\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-zz3bSAuT-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1747129200471,"stop":1747129203592,"duration":3121},"status":"passed","steps":[],"attachments":[{"uid":"d0ee4e3d37c3eaec","name":"Scroll Info","source":"d0ee4e3d37c3eaec.txt","type":"text/plain","size":53},{"uid":"1d051826a078ec44","name":"Market Scroll Error","source":"1d051826a078ec44.txt","type":"text/plain","size":1065}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1747129204248,"stop":1747129204249,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bd0c8fe1bf456cb8","name":"Final Screenshot","source":"bd0c8fe1bf456cb8.png","type":"image/png","size":711947}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1747129204258,"stop":1747129204259,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"f03d63133d08cf9e","name":"Expected Image Source","source":"f03d63133d08cf9e.txt","type":"text/plain","size":61},{"uid":"f5fb3b2f96e1badf","name":"Image Verification Error","source":"f5fb3b2f96e1badf.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1747129204259,"stop":1747129204275,"duration":16},"status":"passed","steps":[],"attachments":[{"uid":"ad3090264096af87","name":"Campaign Images","source":"ad3090264096af87.txt","type":"text/plain","size":1569}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":6,"stepsCount":4,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2e8ed2bea650f14b","name":"URLs for S-CLASS (SALOON)","source":"2e8ed2bea650f14b.json","type":"application/json","size":900},{"uid":"16b8c9ae74deefbb","name":"log","source":"16b8c9ae74deefbb.txt","type":"text/plain","size":180832}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":10,"stepsCount":18,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"36dfc3920077ffdeb740b1e66f1b872b"},{"name":"parentSuite","value":"HU/hu"},{"name":"suite","value":"BFV2"},{"name":"subSuite","value":"V223 - S-CLASS (SALOON)"},{"name":"tag","value":"BFV2"},{"name":"tag","value":"HU/hu"},{"name":"tag","value":"V223"},{"name":"tag","value":"SALOON"},{"name":"tag","value":"S-CLASS"},{"name":"defect","value":"Wrong Personalization Image"},{"name":"tag","value":"Personalization Issue"},{"name":"host","value":"fv-az1075-45"},{"name":"thread","value":"2295-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV2', 'market_code': 'HU/hu', 'model_code': 'V223', 'model_name': 'S-CLASS', 'body_type': 'SALOON', 'urls': {'MODEL_CODE': 'V223?internal_test=true', 'PRODUCT_PAGE': 'https://www.mercedes-benz.hu/passengercars/models/saloon/s-class/overview.html?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/HU/hu/S-KLASSE/LIMOUSINE_LANG?internal_test=true', 'ONLINE_SHOP': 'https://www.mercedes-benz.hu/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-S/?emhsortType=price-asc&emhbodyType=LONG_SEDAN?internal_test=true', 'TEST_DRIVE': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=V223&modelType=ALL?internal_test=true', 'HOME_PAGE': 'https://www.mercedes-benz.hu/?internal_test=true', 'BODY_TYPE': 'SALOON?internal_test=true', 'MODEL_NAME': 'S-CLASS?internal_test=true'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c15b588409420f57","status":"failed","statusDetails":"Failed: ❌ Test 'BFV2' failed because the campaign was identified as part of the Control Group.","time":{"start":1747129106143,"stop":1747129148741,"duration":42598}},{"uid":"cc1dcb60c96630bb","status":"failed","statusDetails":"Failed: ❌ Test 'BFV2' failed due to image verification error: Message:","time":{"start":1747129043069,"stop":1747129106055,"duration":62986}},{"uid":"927311579826e199","status":"failed","statusDetails":"Failed: ❌ Test 'BFV2' failed due to image verification error: Message:","time":{"start":1747128986389,"stop":1747129042961,"duration":56572}},{"uid":"464cca31b27391aa","status":"failed","statusDetails":"Failed: ❌ Test 'BFV2' failed due to image verification error: Message:","time":{"start":1747128919943,"stop":1747128986360,"duration":66417}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["HU/hu","SALOON","Personalization Issue","V223","S-CLASS","BFV2"]},"source":"d04fa5f13ab4c64.json","parameterValues":["{'test_name': 'BFV2', 'market_code': 'HU/hu', 'model_code': 'V223', 'model_name': 'S-CLASS', 'body_type': 'SALOON', 'urls': {'MODEL_CODE': 'V223?internal_test=true', 'PRODUCT_PAGE': 'https://www.mercedes-benz.hu/passengercars/models/saloon/s-class/overview.html?internal_test=true', 'CONFIGURATOR': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/HU/hu/S-KLASSE/LIMOUSINE_LANG?internal_test=true', 'ONLINE_SHOP': 'https://www.mercedes-benz.hu/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-S/?emhsortType=price-asc&emhbodyType=LONG_SEDAN?internal_test=true', 'TEST_DRIVE': 'https://www.mercedes-benz.hu/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=V223&modelType=ALL?internal_test=true', 'HOME_PAGE': 'https://www.mercedes-benz.hu/?internal_test=true', 'BODY_TYPE': 'SALOON?internal_test=true', 'MODEL_NAME': 'S-CLASS?internal_test=true'}}"]}