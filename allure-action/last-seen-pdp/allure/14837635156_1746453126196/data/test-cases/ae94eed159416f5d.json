{"uid":"ae94eed159416f5d","name":"test_run[test_case27]","fullName":"QAAppAllure#test_run","historyId":"568626715d13fe9f04cb91e53ae36f1d","time":{"start":1746452725935,"stop":1746452770972,"duration":45037},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen PDP' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'PL/pl', 'model_code': 'W465', 'model_name': 'G-CLASS', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"693c10139f7b2845b96f49135b06e36b\")>\ntest_name = 'Last Seen PDP', market_code = 'PL/pl', model_code = 'W465'\nmodel_name = 'G-CLASS', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.pl/passengercars/mercedes-benz-cars/car-configurator.h...zation/CCci/PL/pl/bm/4652101,4652501,4653101', 'HOME_PAGE': 'https://www.mercedes-benz.pl/', 'MODEL_CODE': 'W465', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f29bf681d10>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f29bf647490>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen PDP' failed.\n\nQAAppAllure.py:174: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746452725935,"stop":1746452725935,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen PDP' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'PL/pl', 'model_code': 'W465', 'model_name': 'G-CLASS', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"693c10139f7b2845b96f49135b06e36b\")>\ntest_name = 'Last Seen PDP', market_code = 'PL/pl', model_code = 'W465'\nmodel_name = 'G-CLASS', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.pl/passengercars/mercedes-benz-cars/car-configurator.h...zation/CCci/PL/pl/bm/4652101,4652501,4653101', 'HOME_PAGE': 'https://www.mercedes-benz.pl/', 'MODEL_CODE': 'W465', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f29bf681d10>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f29bf647490>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen PDP' failed.\n\nQAAppAllure.py:174: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746452726265,"stop":1746452726295,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Enabling network logging","time":{"start":1746452726295,"stop":1746452726296,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Perform Last Seen PDP Logic","time":{"start":1746452732836,"stop":1746452752917,"duration":20081},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.pl/passengercars/buy/new-car/search-results.html/vehicleCategory-vehicles/brand-Mercedes-Benz/modelIdentifier-G_CLASS/?emhsortType=price-asc&emhbodyType=SUV","time":{"start":1746452732836,"stop":1746452735314,"duration":2478},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":" Extracted PDP URL","time":{"start":1746452735314,"stop":1746452740583,"duration":5269},"status":"passed","steps":[],"attachments":[{"uid":"c3de4093db4a7187","name":"Extracted PDP URL","source":"c3de4093db4a7187.txt","type":"text/plain","size":99}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"\uD83C\uDF0D Opened PDP URL: https://www.mercedes-benz.pl/passengercars/buy/new-car/product.html/G580--FN_0455917717_PL_354ae2f5","time":{"start":1746452740583,"stop":1746452747900,"duration":7317},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.pl/","time":{"start":1746452747900,"stop":1746452752917,"duration":5017},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":4,"hasContent":true},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746452756917,"stop":1746452757503,"duration":586},"status":"passed","steps":[{"name":"Setting campaign name substring for test: Last Seen PDP","time":{"start":1746452756917,"stop":1746452756917,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"4aa55aa7457fbc8a","name":"Info","source":"4aa55aa7457fbc8a.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"Capturing XHR responses","time":{"start":1746452756917,"stop":1746452757491,"duration":574},"status":"passed","steps":[],"attachments":[{"uid":"bf20f3884565135b","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_poland_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoicGxfUEwiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LnBsLyIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNjQifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjIxMjIwNDAzMTkuMTc0NjQ1MjczOSJ9LCJhbm9uSWQiOiJhYWJkN2VjMWJhNzY1NTkyIn0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiNzYyODkyNTQ3MzIwNTkzNCJ9","source":"bf20f3884565135b.json","type":"application/json","size":2289}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"✅ Campaign 'dcp-last-seen-pdp-srp | all available models | home | simple-teaser' has userGroup: Default and experienceName: Experience 1.","time":{"start":1746452757503,"stop":1746452757503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"attachmentStep":false,"stepsCount":3,"hasContent":true},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746452757503,"stop":1746452767592,"duration":10089},"status":"passed","steps":[{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746452767591,"stop":1746452767592,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"109405095eff14b3","name":"Expected Image Source","source":"109405095eff14b3.txt","type":"text/plain","size":37},{"uid":"1aa00852701a593c","name":"Image Verification Error","source":"1aa00852701a593c.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"attachmentStep":false,"stepsCount":1,"hasContent":true},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746452767592,"stop":1746452767597,"duration":5},"status":"passed","steps":[],"attachments":[{"uid":"61c9c5a7cfdca194","name":"Campaign Images","source":"61c9c5a7cfdca194.txt","type":"text/plain","size":924}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746452767597,"stop":1746452770616,"duration":3019},"status":"passed","steps":[],"attachments":[{"uid":"d9457467d13befc7","name":"Scroll Info","source":"d9457467d13befc7.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"✅ Screenshot captured and saved","time":{"start":1746452770893,"stop":1746452770894,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b3f97006661eef2a","name":"Final Screenshot","source":"b3f97006661eef2a.png","type":"image/png","size":945166}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"b7ab11408853c2fa","name":"URLs for G-CLASS (SUV)","source":"b7ab11408853c2fa.json","type":"application/json","size":734},{"uid":"9d43aac3079da5cb","name":"Test Failure","source":"9d43aac3079da5cb.txt","type":"text/plain","size":32},{"uid":"5490e0c809099aa2","name":"log","source":"5490e0c809099aa2.txt","type":"text/plain","size":25817}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":11,"attachmentStep":false,"stepsCount":16,"hasContent":true},"afterStages":[],"labels":[{"name":"as_id","value":"113e24e32f02bd9f2882246208faca46"},{"name":"parentSuite","value":"PL/pl"},{"name":"suite","value":"Last Seen PDP"},{"name":"subSuite","value":"W465 - G-CLASS (SUV)"},{"name":"tag","value":"Last Seen PDP"},{"name":"tag","value":"PL/pl"},{"name":"tag","value":"W465"},{"name":"tag","value":"SUV"},{"name":"tag","value":"G-CLASS"},{"name":"host","value":"fv-az797-391"},{"name":"thread","value":"2259-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Seen PDP', 'market_code': 'PL/pl', 'model_code': 'W465', 'model_name': 'G-CLASS', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'W465', 'PRODUCT_PAGE': 'https://www.mercedes-benz.pl/passengercars/models/suv/g-class/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.pl/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/PL/pl/bm/4652101,4652501,4653101', 'ONLINE_SHOP': 'https://www.mercedes-benz.pl/passengercars/buy/new-car/search-results.html/vehicleCategory-vehicles/brand-Mercedes-Benz/modelIdentifier-G_CLASS/?emhsortType=price-asc&emhbodyType=SUV', 'TEST_DRIVE': 'https://www.mercedes-benz.pl/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=W465&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.pl/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'G-CLASS'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["Last Seen PDP","W465","PL/pl","SUV","G-CLASS"]},"source":"ae94eed159416f5d.json","parameterValues":["{'test_name': 'Last Seen PDP', 'market_code': 'PL/pl', 'model_code': 'W465', 'model_name': 'G-CLASS', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'W465', 'PRODUCT_PAGE': 'https://www.mercedes-benz.pl/passengercars/models/suv/g-class/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.pl/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/PL/pl/bm/4652101,4652501,4653101', 'ONLINE_SHOP': 'https://www.mercedes-benz.pl/passengercars/buy/new-car/search-results.html/vehicleCategory-vehicles/brand-Mercedes-Benz/modelIdentifier-G_CLASS/?emhsortType=price-asc&emhbodyType=SUV', 'TEST_DRIVE': 'https://www.mercedes-benz.pl/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=W465&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.pl/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'G-CLASS'}}"]}