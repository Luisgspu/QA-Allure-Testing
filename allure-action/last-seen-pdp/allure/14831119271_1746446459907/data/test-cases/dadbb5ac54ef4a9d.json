{"uid":"dadbb5ac54ef4a9d","name":"test_run[test_case78]","fullName":"QAAppAllure#test_run","historyId":"2300171692ff61f093a9845a90900e87","time":{"start":1746429738417,"stop":1746429806300,"duration":67883},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen PDP' failed.","statusTrace":"test_case = {'body_type': 'MODELS', 'market_code': 'BE/nl', 'model_code': 'A236', 'model_name': 'CABRIOLET-ROADSTER', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f7a2a0d258ed7c68d5e4ec0832fa77d\")>\ntest_name = 'Last Seen PDP', market_code = 'BE/nl', model_code = 'A236'\nmodel_name = 'CABRIOLET-ROADSTER', body_type = 'MODELS', attempt = 1\nurls = {'BODY_TYPE': 'MODELS', 'CONFIGURATOR': 'https://www.mercedes-benz.be/nl_BE/passengercars/mercedes-benz-cars/car-confi...motorization/CCci/BE/nl/CLE-KLASSE/CABRIOLET', 'HOME_PAGE': 'https://www.mercedes-benz.be/', 'MODEL_CODE': 'A236', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7fca3dc420f0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7fca3dce96a0>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen PDP' failed.\n\nQAAppAllure.py:174: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746429738417,"stop":1746429738417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen PDP' failed.","statusTrace":"test_case = {'body_type': 'MODELS', 'market_code': 'BE/nl', 'model_code': 'A236', 'model_name': 'CABRIOLET-ROADSTER', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f7a2a0d258ed7c68d5e4ec0832fa77d\")>\ntest_name = 'Last Seen PDP', market_code = 'BE/nl', model_code = 'A236'\nmodel_name = 'CABRIOLET-ROADSTER', body_type = 'MODELS', attempt = 1\nurls = {'BODY_TYPE': 'MODELS', 'CONFIGURATOR': 'https://www.mercedes-benz.be/nl_BE/passengercars/mercedes-benz-cars/car-confi...motorization/CCci/BE/nl/CLE-KLASSE/CABRIOLET', 'HOME_PAGE': 'https://www.mercedes-benz.be/', 'MODEL_CODE': 'A236', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7fca3dc420f0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7fca3dce96a0>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen PDP' failed.\n\nQAAppAllure.py:174: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746429740313,"stop":1746429740498,"duration":185},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Enabling network logging","time":{"start":1746429740498,"stop":1746429740510,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Perform Last Seen PDP Logic","time":{"start":1746429750822,"stop":1746429785667,"duration":34845},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.be/nl_BE/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/model-CLE/?emhsortType=price-asc&emhbodyType=CABRIO","time":{"start":1746429750822,"stop":1746429755478,"duration":4656},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":" Extracted PDP URL","time":{"start":1746429755478,"stop":1746429762923,"duration":7445},"status":"passed","steps":[],"attachments":[{"uid":"85e0356d9ce8cf9b","name":"Extracted PDP URL","source":"85e0356d9ce8cf9b.txt","type":"text/plain","size":126}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"\uD83C\uDF0D Opened PDP URL: https://www.mercedes-benz.be/nl_BE/passengercars/buy/new-car/product.html/CLE-180-Cabriolet-Luxury-Line_0451325447_BE_354ae2f5","time":{"start":1746429762923,"stop":1746429770555,"duration":7632},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.be/","time":{"start":1746429770555,"stop":1746429785667,"duration":15112},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746429789667,"stop":1746429792418,"duration":2751},"status":"passed","steps":[{"name":"Setting campaign name substring for test: Last Seen PDP","time":{"start":1746429789667,"stop":1746429789668,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"78e60349ad19185a","name":"Info","source":"78e60349ad19185a.txt","type":"text/plain","size":53}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"Capturing XHR responses","time":{"start":1746429789668,"stop":1746429792334,"duration":2666},"status":"passed","steps":[],"attachments":[{"uid":"2af0c3fef224643","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_belgium_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoibmxfQkUiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmJlL25sX0JFIiwidXJsUmVmZXJyZXIiOiIiLCJjaGFubmVsIjoiV2ViIiwiYmVhY29uVmVyc2lvbiI6MTYsImNvbmZpZ1ZlcnNpb24iOiIyNDEifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjcxMDY5NDQyNi4xNzQ2NDI5NzUxIn0sImFub25JZCI6ImUxNDY2OGE5MzNkMjg5Y2UifSwicGVyZm9ybWFuY2UiOnsic2RrUGFyc2VUaW1lIjo5LCJzZGtMb2FkVGltZSI6MTF9LCJkZWJ1ZyI6eyJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiIzOTg3ODk5NDk2OTIyMTA0In0%3D","source":"2af0c3fef224643.json","type":"application/json","size":3086}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"✅ Campaign 'dcp-last-seen-pdp-srp | all available models | home | simple-teaser' has userGroup: Default and experienceName: nl.","time":{"start":1746429792418,"stop":1746429792418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746429792418,"stop":1746429802704,"duration":10286},"status":"passed","steps":[{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746429802703,"stop":1746429802704,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b46e392d03cea77b","name":"Expected Image Source","source":"b46e392d03cea77b.txt","type":"text/plain","size":37},{"uid":"2f6dc70f7a90c516","name":"Image Verification Error","source":"2f6dc70f7a90c516.txt","type":"text/plain","size":17}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746429802704,"stop":1746429802712,"duration":8},"status":"passed","steps":[],"attachments":[{"uid":"5feeac09f17d0f5f","name":"Campaign Images","source":"5feeac09f17d0f5f.txt","type":"text/plain","size":503}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746429802712,"stop":1746429805777,"duration":3065},"status":"passed","steps":[],"attachments":[{"uid":"d058b6fb2f2ae05b","name":"Scroll Info","source":"d058b6fb2f2ae05b.txt","type":"text/plain","size":53}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"✅ Screenshot captured and saved","time":{"start":1746429806158,"stop":1746429806160,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"fd6d57d03ae74e0b","name":"Final Screenshot","source":"fd6d57d03ae74e0b.png","type":"image/png","size":701813}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"4fa70f75398d5fbf","name":"URLs for CABRIOLET-ROADSTER (MODELS)","source":"4fa70f75398d5fbf.json","type":"application/json","size":776},{"uid":"7a53e0e9dfa8e865","name":"Test Failure","source":"7a53e0e9dfa8e865.txt","type":"text/plain","size":32},{"uid":"20faf0f273eb67a7","name":"log","source":"20faf0f273eb67a7.txt","type":"text/plain","size":60640}],"parameters":[],"stepsCount":16,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":11},"afterStages":[],"labels":[{"name":"as_id","value":"950e410119cd11ad4c1e8e2b850b5c78"},{"name":"parentSuite","value":"BE/nl"},{"name":"suite","value":"Last Seen PDP"},{"name":"subSuite","value":"A236 - CABRIOLET-ROADSTER (MODELS)"},{"name":"tag","value":"Last Seen PDP"},{"name":"tag","value":"BE/nl"},{"name":"tag","value":"A236"},{"name":"tag","value":"MODELS"},{"name":"tag","value":"CABRIOLET-ROADSTER"},{"name":"host","value":"fv-az1690-33"},{"name":"thread","value":"2261-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Seen PDP', 'market_code': 'BE/nl', 'model_code': 'A236', 'model_name': 'CABRIOLET-ROADSTER', 'body_type': 'MODELS', 'urls': {'MODEL_CODE': 'A236', 'PRODUCT_PAGE': 'https://www.mercedes-benz.be/nl_BE/passengercars/models/cabriolet-roadster/cle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.be/nl_BE/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/BE/nl/CLE-KLASSE/CABRIOLET', 'ONLINE_SHOP': 'https://www.mercedes-benz.be/nl_BE/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/model-CLE/?emhsortType=price-asc&emhbodyType=CABRIO', 'TEST_DRIVE': 'https://www.mercedes-benz.be/nl_BE/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=A236&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.be/', 'BODY_TYPE': 'MODELS', 'MODEL_NAME': 'CABRIOLET-ROADSTER'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["Last Seen PDP","MODELS","BE/nl","A236","CABRIOLET-ROADSTER"]},"source":"dadbb5ac54ef4a9d.json","parameterValues":["{'test_name': 'Last Seen PDP', 'market_code': 'BE/nl', 'model_code': 'A236', 'model_name': 'CABRIOLET-ROADSTER', 'body_type': 'MODELS', 'urls': {'MODEL_CODE': 'A236', 'PRODUCT_PAGE': 'https://www.mercedes-benz.be/nl_BE/passengercars/models/cabriolet-roadster/cle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.be/nl_BE/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/BE/nl/CLE-KLASSE/CABRIOLET', 'ONLINE_SHOP': 'https://www.mercedes-benz.be/nl_BE/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/model-CLE/?emhsortType=price-asc&emhbodyType=CABRIO', 'TEST_DRIVE': 'https://www.mercedes-benz.be/nl_BE/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=A236&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.be/', 'BODY_TYPE': 'MODELS', 'MODEL_NAME': 'CABRIOLET-ROADSTER'}}"]}