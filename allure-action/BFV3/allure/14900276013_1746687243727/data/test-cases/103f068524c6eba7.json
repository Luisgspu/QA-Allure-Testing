{"uid":"103f068524c6eba7","name":"test_run[test_case6]","fullName":"QAAppAllure#test_run","historyId":"397939f2de60e51e8b421948b336f8c5","time":{"start":1746686401274,"stop":1746686454408,"duration":53134},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'DK/da', 'model_code': 'C254', 'model_name': 'GLC-COUPE', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ff1d97c288fb93fee593de444e995b7\")>\ntest_name = 'BFV3', model_name = 'GLC-COUPE', body_type = 'SUV', retries = 1\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f489e354f50>\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DK/da/GLC-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.dk/', 'MODEL_CODE': 'C254', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:63: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746686401274,"stop":1746686401274,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'DK/da', 'model_code': 'C254', 'model_name': 'GLC-COUPE', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nQAAppAllure.py:176: in run_test\n    test_success = verify_personalization_and_capture(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9ff1d97c288fb93fee593de444e995b7\")>\ntest_name = 'BFV3', model_name = 'GLC-COUPE', body_type = 'SUV', retries = 1\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\ntest_success = False\nxhr_capturer = <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f489e354f50>\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DK/da/GLC-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.dk/', 'MODEL_CODE': 'C254', ...}\n\n    def verify_personalization_and_capture(\n            driver, test_name, model_name, body_type, retries, screenshot_dir,\n            test_success, xhr_capturer, urls):\n        \"\"\"\n        Verifies the personalized image and captures XHR responses and screenshots.\n        \"\"\"\n        try:\n            # Check userGroup before verifying the personalized image\n            with allure.step(\"\uD83D\uDD0D Checking userGroup in XHR responses...\"):\n                try:\n                    if driver.session_id:\n                        logging.info(f\"ℹ️ Setting campaign name substring to: {test_name}\")\n                        xhr_capturer.set_campaign_name_substring(test_name)\n                        logging.info(\"✅ Campaign name substring set successfully.\")\n    \n                        # Capture XHR responses\n                        xhr_capturer.capture_responses()\n                        xhr_data = xhr_capturer.get_captured_data()\n                        logging.info(f\"ℹ️ Captured XHR data: {xhr_data}\")\n    \n                        # Check userGroup for each campaign response\n                        for response in xhr_data:\n                            campaigns = response.get(\"body\", {}).get(\"campaignResponses\", [])\n                            for campaign in campaigns:\n                                campaign_name = campaign.get(\"campaignName\", \"Unknown Campaign\")\n                                user_group = campaign.get(\"userGroup\", \"Unknown UserGroup\")\n                                experience_Name = campaign.get(\"experienceName\", \"Unknown Experience\")\n    \n                                # Check if experienceName contains \"Control Group\" or userGroup is \"control\"\n                                if \"Control Group\" in experience_Name or user_group.lower() == \"control\":\n                                    with allure.step(f\"❌ Campaign '{campaign_name}' is in the Control Group. Retrying test.\"):\n                                        message = f\"❌ Test '{test_name}' failed because the campaign was identified as part of the Control Group.\"\n>                                       pytest.fail(message)\nE                                       Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n\nApp/VerifyPersonalizationAndCapture.py:63: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746686402380,"stop":1746686402472,"duration":92},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1746686402472,"stop":1746686402476,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating to HOME_PAGE: https://www.mercedes-benz.dk/","time":{"start":1746686402476,"stop":1746686413467,"duration":10991},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Detecting and accepting cookies","time":{"start":1746686413467,"stop":1746686416238,"duration":2771},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform BFV3 Test Logic","time":{"start":1746686416238,"stop":1746686448983,"duration":32745},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.dk/passengercars/models/suv/glc-coupe/overview.html","time":{"start":1746686416238,"stop":1746686428092,"duration":11854},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DK/da/GLC-KLASSE/COUPE","time":{"start":1746686428092,"stop":1746686434492,"duration":6400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1746686434492,"stop":1746686441281,"duration":6789},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.dk/","time":{"start":1746686441281,"stop":1746686448983,"duration":7702},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746686452983,"stop":1746686454327,"duration":1344},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/App/VerifyPersonalizationAndCapture.py\", line 63, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-zz3bSAuT-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Setting campaign name substring for test: BFV3","time":{"start":1746686452983,"stop":1746686452983,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"bb6957e12279ef3c","name":"Info","source":"bb6957e12279ef3c.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1746686452983,"stop":1746686454310,"duration":1327},"status":"passed","steps":[],"attachments":[{"uid":"68bad6b2c1ef8cf9","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_denmark_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZGFfREsiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmRrLyIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNjQifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjE2MDU0NTM3NTguMTc0NjY4NjQxNiJ9LCJhbm9uSWQiOiJiMWNhYWE1OWRkZWUwOTU0In0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMzExMTU3ODk0NTIyOTMyMSJ9","source":"68bad6b2c1ef8cf9.json","type":"application/json","size":2797}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"❌ Campaign 'best-fitting-vehicle | all models | home | simple-teaser and stage' is in the Control Group. Retrying test.","time":{"start":1746686454326,"stop":1746686454326,"duration":0},"status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed because the campaign was identified as part of the Control Group.\n","statusTrace":"  File \"/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/App/VerifyPersonalizationAndCapture.py\", line 63, in verify_personalization_and_capture\n    pytest.fail(message)\n    ~~~~~~~~~~~^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-zz3bSAuT-py3.13/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"89d86256a4f62a","name":"URLs for GLC-COUPE (SUV)","source":"89d86256a4f62a.json","type":"application/json","size":736},{"uid":"15247dbb42c04497","name":"log","source":"15247dbb42c04497.txt","type":"text/plain","size":80158}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"stepsCount":13,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"d8933f0965644963007ef4ef78d723c8"},{"name":"parentSuite","value":"DK/da"},{"name":"suite","value":"BFV3"},{"name":"subSuite","value":"C254 - GLC-COUPE (SUV)"},{"name":"tag","value":"BFV3"},{"name":"tag","value":"DK/da"},{"name":"tag","value":"C254"},{"name":"tag","value":"SUV"},{"name":"tag","value":"GLC-COUPE"},{"name":"host","value":"fv-az1768-803"},{"name":"thread","value":"2301-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV3', 'market_code': 'DK/da', 'model_code': 'C254', 'model_name': 'GLC-COUPE', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'C254', 'PRODUCT_PAGE': 'https://www.mercedes-benz.dk/passengercars/models/suv/glc-coupe/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DK/da/GLC-KLASSE/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.dk/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLC/?emhsortType=price-asc&emhbodyType=COUPE', 'TEST_DRIVE': 'https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C254&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.dk/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLC-COUPE'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["C254","DK/da","SUV","GLC-COUPE","BFV3"]},"source":"103f068524c6eba7.json","parameterValues":["{'test_name': 'BFV3', 'market_code': 'DK/da', 'model_code': 'C254', 'model_name': 'GLC-COUPE', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'C254', 'PRODUCT_PAGE': 'https://www.mercedes-benz.dk/passengercars/models/suv/glc-coupe/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DK/da/GLC-KLASSE/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.dk/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLC/?emhsortType=price-asc&emhbodyType=COUPE', 'TEST_DRIVE': 'https://www.mercedes-benz.dk/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=C254&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.dk/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLC-COUPE'}}"]}