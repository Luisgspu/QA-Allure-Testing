{"uid":"3a90a28e3859d8aa","name":"test_run[test_case280]","fullName":"QAAppAllure#test_run","historyId":"12f2f6b5d02946a4244d9b2bf48c0ee2","time":{"start":1746347090984,"stop":1746347163119,"duration":72135},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'FR/fr', 'model_code': 'X294', 'model_name': 'EQE', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:299: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c3cf23ad8e8829f9f020c7194d163e58\")>\ntest_name = 'BFV3', market_code = 'FR/fr', model_code = 'X294'\nmodel_name = 'EQE', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/car-configurator.h...motorization/CCci/FR/fr/EQE-KLASSE/OFFROADER', 'HOME_PAGE': 'https://www.mercedes-benz.fr/', 'MODEL_CODE': 'X294', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f3809a75b50>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f3803653930>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'BFV3' failed.\n\nQAAppAllure.py:174: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746347090983,"stop":1746347090983,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'FR/fr', 'model_code': 'X294', 'model_name': 'EQE', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:299: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c3cf23ad8e8829f9f020c7194d163e58\")>\ntest_name = 'BFV3', market_code = 'FR/fr', model_code = 'X294'\nmodel_name = 'EQE', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/car-configurator.h...motorization/CCci/FR/fr/EQE-KLASSE/OFFROADER', 'HOME_PAGE': 'https://www.mercedes-benz.fr/', 'MODEL_CODE': 'X294', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f3809a75b50>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f3803653930>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'BFV3' failed.\n\nQAAppAllure.py:174: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746347092016,"stop":1746347092109,"duration":93},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1746347092110,"stop":1746347092123,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform BFV3 Test Logic","time":{"start":1746347102378,"stop":1746347139398,"duration":37020},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.fr/passengercars/models/suv/eqe/overview.html","time":{"start":1746347102378,"stop":1746347116605,"duration":14227},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/FR/fr/EQE-KLASSE/OFFROADER","time":{"start":1746347116605,"stop":1746347123538,"duration":6933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Performing configuration actions","time":{"start":1746347123538,"stop":1746347131332,"duration":7794},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.fr/","time":{"start":1746347131332,"stop":1746347139398,"duration":8066},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":4,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746347143402,"stop":1746347146291,"duration":2889},"status":"passed","steps":[{"name":"Setting campaign name substring for test: BFV3","time":{"start":1746347143402,"stop":1746347143402,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"4a71e957a269201c","name":"Info","source":"4a71e957a269201c.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1746347143402,"stop":1746347146245,"duration":2843},"status":"passed","steps":[],"attachments":[{"uid":"84b457cd7986df9f","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_france_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZnJfTFUiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmZyLyIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNjIifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjE0MTY5Mjg3LjE3NDYzNDcxMDMifSwiYW5vbklkIjoiZjg3NTE4OWMxYzE0YzM0ZSJ9LCJwZXJmb3JtYW5jZSI6e30sImRlYnVnIjp7ImV4cGxhbmF0aW9ucyI6dHJ1ZX0sImNhdGFsb2ciOnt9LCJjb25zZW50cyI6W10sImFjY291bnQiOnt9LCJfdG9vbHNFdmVudExpbmtJZCI6IjU5OTc4NDI4MTkzMDA2NjcifQ%3D%3D","source":"84b457cd7986df9f.json","type":"application/json","size":2986}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Campaign 'best-fitting-vehicle | all models | home | simple-teaser, campaign-module and stage' has userGroup: Default and experienceName: Target Group.","time":{"start":1746347146291,"stop":1746347146291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":3,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746347146291,"stop":1746347156692,"duration":10401},"status":"passed","steps":[{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746347156691,"stop":1746347156692,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e1104e038589ae18","name":"Expected Image Source","source":"e1104e038589ae18.txt","type":"text/plain","size":61},{"uid":"e48ebe4b4fb72d38","name":"Image Verification Error","source":"e48ebe4b4fb72d38.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746347156692,"stop":1746347156727,"duration":35},"status":"passed","steps":[],"attachments":[{"uid":"42c7296ce7f82a8e","name":"Campaign Images","source":"42c7296ce7f82a8e.txt","type":"text/plain","size":582}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746347156727,"stop":1746347162045,"duration":5318},"status":"passed","steps":[],"attachments":[{"uid":"2c3f979d00f8ec2","name":"Scroll Info","source":"2c3f979d00f8ec2.txt","type":"text/plain","size":53},{"uid":"8af88715d84b7877","name":"Scroll Info (FR)","source":"8af88715d84b7877.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1746347162980,"stop":1746347162981,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bc26e749f1602a66","name":"Final Screenshot","source":"bc26e749f1602a66.png","type":"image/png","size":892578}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8127273d284b9bf5","name":"URLs for EQE (SUV)","source":"8127273d284b9bf5.json","type":"application/json","size":753},{"uid":"afb586ec3cbe4d12","name":"Test Failure","source":"afb586ec3cbe4d12.txt","type":"text/plain","size":23},{"uid":"e04465b837e95855","name":"log","source":"e04465b837e95855.txt","type":"text/plain","size":231142}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":11,"stepsCount":16,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"9983eb236c4b17330ada2ad3a9dea7cf"},{"name":"parentSuite","value":"FR/fr"},{"name":"suite","value":"BFV3"},{"name":"subSuite","value":"X294 - EQE (SUV)"},{"name":"tag","value":"BFV3"},{"name":"tag","value":"FR/fr"},{"name":"tag","value":"X294"},{"name":"tag","value":"SUV"},{"name":"tag","value":"EQE"},{"name":"host","value":"fv-az1360-354"},{"name":"thread","value":"2248-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV3', 'market_code': 'FR/fr', 'model_code': 'X294', 'model_name': 'EQE', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'X294', 'PRODUCT_PAGE': 'https://www.mercedes-benz.fr/passengercars/models/suv/eqe/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/FR/fr/EQE-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.fr/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-EQE_CLASS/?emhsortType=price-asc&emhbodyType=SUV&emhfuelType=ELECTRIC', 'TEST_DRIVE': 'https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X294&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.fr/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'EQE'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["SUV","EQE","X294","BFV3","FR/fr"]},"source":"3a90a28e3859d8aa.json","parameterValues":["{'test_name': 'BFV3', 'market_code': 'FR/fr', 'model_code': 'X294', 'model_name': 'EQE', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'X294', 'PRODUCT_PAGE': 'https://www.mercedes-benz.fr/passengercars/models/suv/eqe/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/FR/fr/EQE-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.fr/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-EQE_CLASS/?emhsortType=price-asc&emhbodyType=SUV&emhfuelType=ELECTRIC', 'TEST_DRIVE': 'https://www.mercedes-benz.fr/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X294&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.fr/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'EQE'}}"]}