{"uid":"fef0df65acf292fa","name":"test_run[test_case293]","fullName":"QAAppAllure#test_run","historyId":"86da8362cdbf2c391ba8fc06ac89c648","time":{"start":1746314715768,"stop":1746314758420,"duration":42652},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV1' failed.","statusTrace":"test_case = {'body_type': 'ESTATE', 'market_code': 'DE/de', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:298: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"94ab3a2d390962cabbf154532ee5b2b6\")>\ntest_name = 'BFV1', market_code = 'DE/de', model_code = 'X118-fl'\nmodel_name = 'CLA-SHOOTING-BRAKE', body_type = 'ESTATE', attempt = 1\nurls = {'BODY_TYPE': 'ESTATE', 'CONFIGURATOR': 'https://www.mercedes-benz.de/passengercars/mercedes-benz-cars/car-configurato...otorization/CCci/DE/de/CLA/SHOOTING BRAKE', 'HOME_PAGE': 'https://www.mercedes-benz.de/', 'MODEL_CODE': 'X118-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f47e2ccc650>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f47e13f8830>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'BFV1' failed.\n\nQAAppAllure.py:174: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746314715768,"stop":1746314715768,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV1' failed.","statusTrace":"test_case = {'body_type': 'ESTATE', 'market_code': 'DE/de', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', ...}\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:298: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"94ab3a2d390962cabbf154532ee5b2b6\")>\ntest_name = 'BFV1', market_code = 'DE/de', model_code = 'X118-fl'\nmodel_name = 'CLA-SHOOTING-BRAKE', body_type = 'ESTATE', attempt = 1\nurls = {'BODY_TYPE': 'ESTATE', 'CONFIGURATOR': 'https://www.mercedes-benz.de/passengercars/mercedes-benz-cars/car-configurato...otorization/CCci/DE/de/CLA/SHOOTING BRAKE', 'HOME_PAGE': 'https://www.mercedes-benz.de/', 'MODEL_CODE': 'X118-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f47e2ccc650>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f47e13f8830>)\nscreenshot_dir = '/home/runner/work/QA-Allure-Testing/QA-Allure-Testing/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n        try:\n            WebDriverWait(driver, 6).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'BFV1' failed.\n\nQAAppAllure.py:174: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746314716467,"stop":1746314716522,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1746314716522,"stop":1746314716525,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform BFV1 Test Logic","time":{"start":1746314726817,"stop":1746314739934,"duration":13117},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigating to: https://www.mercedes-benz.de/passengercars/models/estate/cla-shooting-brake/overview.html","time":{"start":1746314726817,"stop":1746314737349,"duration":10532},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigating back to: https://www.mercedes-benz.de/","time":{"start":1746314737349,"stop":1746314739933,"duration":2584},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746314743934,"stop":1746314744538,"duration":604},"status":"passed","steps":[{"name":"Setting campaign name substring for test: BFV1","time":{"start":1746314743934,"stop":1746314743934,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"781bda710267774c","name":"Info","source":"781bda710267774c.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1746314743934,"stop":1746314744517,"duration":583},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746314744538,"stop":1746314755042,"duration":10504},"status":"passed","steps":[{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746314755041,"stop":1746314755042,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"6629f4ab650dc8ce","name":"Expected Image Source","source":"6629f4ab650dc8ce.txt","type":"text/plain","size":61},{"uid":"fab9055e39609419","name":"Image Verification Error","source":"fab9055e39609419.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746314755042,"stop":1746314755063,"duration":21},"status":"passed","steps":[],"attachments":[{"uid":"a0d2d981a39f51f3","name":"Campaign Images","source":"a0d2d981a39f51f3.txt","type":"text/plain","size":949}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746314755063,"stop":1746314758111,"duration":3048},"status":"passed","steps":[],"attachments":[{"uid":"458490f8776c425","name":"Scroll Info","source":"458490f8776c425.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1746314758351,"stop":1746314758352,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"5e32250d50dca5e","name":"Final Screenshot","source":"5e32250d50dca5e.png","type":"image/png","size":823622}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"98f9f7c010a8ed7f","name":"URLs for CLA-SHOOTING-BRAKE (ESTATE)","source":"98f9f7c010a8ed7f.json","type":"application/json","size":783},{"uid":"eaa739a036a86d8d","name":"45f9f40a-821d-4b80-a919-75d755bf9195-attachment.attach","source":"eaa739a036a86d8d.attach","type":"text/plain","size":48},{"uid":"b4233bcd94fe80d","name":"Test Failure","source":"b4233bcd94fe80d.txt","type":"text/plain","size":23},{"uid":"145c8d229e640bbb","name":"log","source":"145c8d229e640bbb.txt","type":"text/plain","size":41722}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":10,"stepsCount":13,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"2c2355dc072b8d38bfaec9ef9266b0b9"},{"name":"parentSuite","value":"DE/de"},{"name":"suite","value":"BFV1"},{"name":"subSuite","value":"X118-fl - CLA-SHOOTING-BRAKE (ESTATE)"},{"name":"tag","value":"BFV1"},{"name":"tag","value":"DE/de"},{"name":"tag","value":"X118-fl"},{"name":"tag","value":"ESTATE"},{"name":"tag","value":"CLA-SHOOTING-BRAKE"},{"name":"host","value":"fv-az1075-309"},{"name":"thread","value":"2267-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV1', 'market_code': 'DE/de', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', 'body_type': 'ESTATE', 'urls': {'MODEL_CODE': 'X118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.de/passengercars/models/estate/cla-shooting-brake/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.de/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DE/de/CLA/SHOOTING BRAKE', 'ONLINE_SHOP': 'https://www.mercedes-benz.de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=SHOOTING_BRAKE', 'TEST_DRIVE': 'https://www.mercedes-benz.de/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.de/', 'BODY_TYPE': 'ESTATE', 'MODEL_NAME': 'CLA-SHOOTING-BRAKE'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7d5ddb799972ac1e","status":"failed","statusDetails":"Failed: ❌ Test 'BFV1' failed.","time":{"start":1746314672757,"stop":1746314715718,"duration":42961}},{"uid":"325dc88c0ed2927","status":"failed","statusDetails":"Failed: ❌ Test 'BFV1' failed.","time":{"start":1746314625472,"stop":1746314672713,"duration":47241}},{"uid":"92415fb0bd0815ec","status":"failed","statusDetails":"Failed: ❌ Test 'BFV1' failed.","time":{"start":1746314575414,"stop":1746314625410,"duration":49996}},{"uid":"c75754004e746171","status":"failed","statusDetails":"Failed: ❌ Test 'BFV1' failed.","time":{"start":1746314526211,"stop":1746314575392,"duration":49181}},{"uid":"b0942fc8fa74a8d4","status":"failed","statusDetails":"Failed: ❌ Test 'BFV1' failed.","time":{"start":1746314482402,"stop":1746314526102,"duration":43700}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["BFV1","DE/de","CLA-SHOOTING-BRAKE","ESTATE","X118-fl"]},"source":"fef0df65acf292fa.json","parameterValues":["{'test_name': 'BFV1', 'market_code': 'DE/de', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', 'body_type': 'ESTATE', 'urls': {'MODEL_CODE': 'X118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.de/passengercars/models/estate/cla-shooting-brake/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.de/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/DE/de/CLA/SHOOTING BRAKE', 'ONLINE_SHOP': 'https://www.mercedes-benz.de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=SHOOTING_BRAKE', 'TEST_DRIVE': 'https://www.mercedes-benz.de/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.de/', 'BODY_TYPE': 'ESTATE', 'MODEL_NAME': 'CLA-SHOOTING-BRAKE'}}"]}